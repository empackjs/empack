import{_ as i,c as a,o as t,ae as e}from"./chunks/framework.BG0qUWSs.js";const g=JSON.parse('{"title":"App","description":"","frontmatter":{},"headers":[],"relativePath":"api-docs/app.md","filePath":"api-docs/app.md"}'),n={name:"api-docs/app.md"};function l(p,s,h,o,r,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="app" tabindex="-1">App <a class="header-anchor" href="#app" aria-label="Permalink to &quot;App&quot;">​</a></h1><p>The App class is the core of the Empack framework. It is responsible for initializing and assembling the entire application. It provides a flexible yet structured way to:</p><ul><li>Initialize the Express application</li><li>Register controllers</li><li>Attach middleware</li><li>Set up the dependency injection (DI) container</li><li>Configure Swagger API documentation</li><li>Enable WebSocket controllers</li><li>Start the HTTP server and handle graceful shutdown</li><li>Manage exception and 404 response handling</li><li>Integrate the CQRS mediator and event system</li></ul><h2 id="createbuilder-configure-options-appoptions-void" tabindex="-1">createBuilder(configure?: (options: AppOptions) =&gt; void) <a class="header-anchor" href="#createbuilder-configure-options-appoptions-void" aria-label="Permalink to &quot;createBuilder(configure?: (options: AppOptions) =&gt; void)&quot;">​</a></h2><p>The <code>createBuilder()</code> method is the entry point for creating an Empack application. It returns a new App instance and allows you to configure global settings before the server starts.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> app</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> App.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opt: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">AppOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //options</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><h3 id="appoptions" tabindex="-1">AppOptions <a class="header-anchor" href="#appoptions" aria-label="Permalink to &quot;AppOptions&quot;">​</a></h3><p>The <code>AppOptions</code> object allows you to customize global application settings.</p><table tabindex="0"><thead><tr><th>Option</th><th>Type</th><th>Default Value</th><th>Description</th></tr></thead><tbody><tr><td><code>routerPrefix</code></td><td><code>string</code></td><td><code>/api</code></td><td>Global prefix for all API routes.</td></tr><tr><td><code>wsPrefix</code></td><td><code>string</code></td><td><code>&quot;&quot;</code></td><td>Global prefix for all websocket routes</td></tr><tr><td><code>setTimeout</code></td><td><code>number?</code></td><td><code>undefined</code></td><td>Custom timeout for HTTP server.</td></tr></tbody></table><h2 id="addsingleton-token-symbol-constructor-newable" tabindex="-1">addSingleton(token: symbol, constructor: Newable) <a class="header-anchor" href="#addsingleton-token-symbol-constructor-newable" aria-label="Permalink to &quot;addSingleton(token: symbol, constructor: Newable)&quot;">​</a></h2><p>Registers a dependency in singleton scope, meaning it will be created only <strong>once</strong> and reused across the entire application lifecycle.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LOGGER</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Logger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`[LOG] \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addSingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LOGGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, LoggerService)</span></span></code></pre></div><p>Use this for services or resources that should be <strong>shared globally</strong>, such as:</p><ul><li>Logger</li><li>Database connections</li><li>Configuration services</li></ul><h2 id="addconstant-token-symbol-instance-any" tabindex="-1">addConstant(token: symbol, instance: any) <a class="header-anchor" href="#addconstant-token-symbol-instance-any" aria-label="Permalink to &quot;addConstant(token: symbol, instance: any)&quot;">​</a></h2><p>Registers a pre-instantiated object or value into the DI container. This value will be injected <strong>as Singleton</strong>.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CONFIG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> config</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  baseUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  debug: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addConstant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CONFIG</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, config);</span></span></code></pre></div><h2 id="setdotenv" tabindex="-1">setDotEnv() <a class="header-anchor" href="#setdotenv" aria-label="Permalink to &quot;setDotEnv()&quot;">​</a></h2><p>Loads environment variables from <code>process.env</code> and registers an Env service into the DI container. Make sure to load your environment variables (e.g. using dotenv.config()) before calling <code>setDotEnv()</code>. The Env service reads from <code>process.env</code> at the time it&#39;s registered.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDotEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>After that, you can inject the Env using the <code>APP_TOKEN.IEnv</code>:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">APP_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.IEnv) private env: IEnv) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PORT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="setlogger-logger-ilogger" tabindex="-1">setLogger(logger: ILogger) <a class="header-anchor" href="#setlogger-logger-ilogger" aria-label="Permalink to &quot;setLogger(logger: ILogger)&quot;">​</a></h2><p>Replaces the default logger with your own custom implementation.</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyCustomLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>The default logger is a <strong>basic console-based implementation</strong>. To integrate with tools like <code>Winston</code>, <code>Pino</code>, or external logging systems, pass in your own <code>ILogger</code> implementation.</p><p>After that, you can inject the Logger using the <code>APP_TOKEN.ILogger</code> token:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">APP_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ILogger) private logger: ILogger) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.logger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="wip" tabindex="-1">WIP <a class="header-anchor" href="#wip" aria-label="Permalink to &quot;WIP&quot;">​</a></h2>`,29)]))}const c=i(n,[["render",l]]);export{g as __pageData,c as default};
