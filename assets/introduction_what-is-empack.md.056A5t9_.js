import{_ as t,c as o,o as i,ae as r}from"./chunks/framework.BG0qUWSs.js";const m=JSON.parse('{"title":"Empack","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/what-is-empack.md","filePath":"introduction/what-is-empack.md"}'),a={name:"introduction/what-is-empack.md"};function s(n,e,d,l,c,p){return i(),o("div",null,e[0]||(e[0]=[r('<h1 id="empack" tabindex="-1">Empack <a class="header-anchor" href="#empack" aria-label="Permalink to &quot;Empack&quot;">​</a></h1><p>A lightweight, Express-based web server framework.</p><h2 id="description" tabindex="-1">Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;Description&quot;">​</a></h2><p><strong>Empack</strong> is a modern alternative to NestJS, designed for developers who want structure and productivity without the overhead of complex abstractions.</p><p>Built on top of Express, Empack provides a familiar development model with TypeScript decorators, dependency injection, and built-in support for WebSocket routing and CQRS — while maintaining minimalism and full control.</p><p>Unlike NestJS, Empack focuses on <strong>zero-friction development</strong>, helping you stay close to business logic without being tied to rigid module systems or extensive boilerplate.</p><p>Empack is fully compatible with the Express ecosystem, so you can use your favorite middleware, libraries, and tools without modification.</p><h3 id="✨-key-features" tabindex="-1">✨ Key Features <a class="header-anchor" href="#✨-key-features" aria-label="Permalink to &quot;✨ Key Features&quot;">​</a></h3><ul><li>⚡ A DI container powered by Inversify (supports <code>singleton</code>, <code>transient</code>, and <code>request-scope</code>)</li><li>🔌 Middleware and controller injection with shared request container</li><li>📡 Route-based WebSocket controller support with per-connection DI</li><li>🧩 CQRS via built-in Mediator pattern (with <code>@HandleFor()</code> decorators)</li><li>📃 Automatic OpenAPI generation from decorators</li><li>🧱 Minimal abstractions — no modules, no lifecycle complexity</li></ul><hr><h2 id="🔍-empack-vs-nestjs-key-differences" tabindex="-1">🔍 Empack vs NestJS: Key Differences <a class="header-anchor" href="#🔍-empack-vs-nestjs-key-differences" aria-label="Permalink to &quot;🔍 Empack vs NestJS: Key Differences&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Feature / Design Aspect</th><th><strong>Empack</strong></th><th><strong>NestJS</strong></th></tr></thead><tbody><tr><td>🧱 Base Architecture</td><td>Built directly on Express (thin abstraction)</td><td>Built on Express or Fastify with heavy abstraction</td></tr><tr><td>💉 Dependency Injection</td><td>Custom DI with <code>singleton</code>, <code>transient</code>, and <code>request-scope</code></td><td>Built-in DI, limited request-scope, not supported in middleware</td></tr><tr><td>⚙️ Middleware Injection</td><td>Middleware shares the request container with controllers</td><td>Middleware is singleton; request-scoped injection not supported</td></tr><tr><td>📡 WebSocket Routing</td><td>Path-based, DI + auth per connection</td><td>Centralized gateway (singleton), namespace-based routing</td></tr><tr><td>📦 Module System</td><td>No modules — all components wired via DI</td><td>Requires all providers/controllers to be registered in <code>@Module()</code></td></tr></tbody></table><p><strong>Empack</strong> aims to strike a balance between Express&#39;s flexibility and NestJS&#39;s structure — offering:</p><ul><li>Request-scoped DI everywhere (controllers, middleware, WebSocket)</li><li>Lazy middleware resolution</li><li>Zero module registration</li><li>Minimal but powerful decorators</li><li>Seamless integration with existing Express middleware and tools</li></ul>',14)]))}const h=t(a,[["render",s]]);export{m as __pageData,h as default};
