import{_ as t,c as i,o as a,ae as o}from"./chunks/framework.BG0qUWSs.js";const u=JSON.parse('{"title":"What is Empack","description":"","frontmatter":{},"headers":[],"relativePath":"introduction/what-is-empack.md","filePath":"introduction/what-is-empack.md"}'),r={name:"introduction/what-is-empack.md"};function s(n,e,l,c,p,m){return a(),i("div",null,e[0]||(e[0]=[o('<h1 id="what-is-empack" tabindex="-1">What is Empack <a class="header-anchor" href="#what-is-empack" aria-label="Permalink to &quot;What is Empack&quot;">​</a></h1><p><strong>Empack</strong> is a <strong>lightweight alternative to NestJS</strong>, built on top of <strong>Express</strong> with a focus on simplicity, minimalism, and fast developer onboarding. While it offers a familiar, structured development experience like Nest, Empack deliberately avoids heavy abstractions and rigid architecture, making it ideal for small to medium-sized projects that prioritize <strong>flexibility and productivity</strong>.</p><p>Unlike NestJS, Empack embraces a <strong>zero-friction</strong> philosophy—helping developers focus on business logic without being constrained by the framework’s structure or boilerplate code.</p><p>Empack is fully compatible with the existing Express ecosystem, allowing seamless integration with popular Express middleware, libraries, and tools.</p><p>It comes with built-in features including:</p><ul><li>A dependency injection container powered by <a href="https://github.com/inversify/InversifyJS" target="_blank" rel="noreferrer">Inversify</a></li><li>Route-based WebSocket support</li><li>A mediator pattern implementation for CQRS</li><li>Automatic OpenAPI documentation generation</li></ul><p>With TypeScript decorators, Empack simplifies the registration of controllers, routes, OpenAPI metadata, and more. Its built-in mediator enables a clean separation of concerns, fully decoupling controllers from business logic—making CQRS and modular architecture straightforward to adopt.</p>',7)]))}const h=t(r,[["render",s]]);export{u as __pageData,h as default};
